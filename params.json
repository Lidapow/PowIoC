{"name":"PowIoC","tagline":"An Inversion of Control for Unity3D","body":"#PowIoC\r\n\r\nAn Inversion of Control (Dependency Injection) for Unity3D.\r\nThis library utilize ScriptableObject of Unity3D to descript mapping relation.\r\n\r\nThe main purpose is no need to recompile source code, when there just have some dependency changed.\r\n\r\nFollowing snippet is the dependency settings, which stored in a asset file.\r\nYou can edit it in Inspector window, even in a text editor.\r\n\r\nDue to the binding data isn't source code, so the data also can be changed, even your application was built.\r\n\r\n```\r\n  bind:\r\n  - bind: SomeData\r\n    to: SomeData\r\n    scope: \r\n    note: \r\n  - bind: ICommand\r\n    to: CommandA\r\n    scope: PurposeA\r\n    note: \r\n  - bind: ICommand\r\n    to: CommandB\r\n    scope: PurposeB\r\n    note: \r\n  - bind: ILogger\r\n    to: UnityLogger\r\n    scope: \r\n    note: \r\n```\r\n\r\nFollowing code shows how to mark fields which needs inject, and can pass parameter to set the scope and non-singleton.\r\n\r\n```\r\nusing UnityEngine;\r\nusing System.Collections;\r\nusing PowIoC;\r\n\r\npublic class MyComponent : MonoBehaviour {\r\n\t[Inject]\r\n\tSomeData data; \r\n\r\n\t[Inject(\"PurposeA\")]\r\n\tICommand cmdA;\r\n\t[Inject(\"PurposeB\")]\r\n\tICommand cmdB;\r\n\r\n\t[Inject(false)]\r\n\tILogger logger;\r\n\r\n\tvoid Awake () {\r\n\t\tInjector.Inject(this);\r\n\t}\r\n}\r\n```","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}